// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/shinemost/helloworld/model"
)

func newStudent(db *gorm.DB, opts ...gormgen.DOOption) student {
	_student := student{}

	_student.studentDo.UseDB(db, opts...)
	_student.studentDo.UseModel(&model.Student{})

	tableName := _student.studentDo.TableName()
	_student.ALL = field.NewAsterisk(tableName)
	_student.ID = field.NewInt32(tableName, "id")
	_student.Name = field.NewString(tableName, "name")
	_student.Sex = field.NewString(tableName, "sex")
	_student.Age = field.NewInt32(tableName, "age")
	_student.Addr = field.NewString(tableName, "addr")

	_student.fillFieldMap()

	return _student
}

type student struct {
	studentDo studentDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String
	Sex  field.String
	Age  field.Int32
	Addr field.String

	fieldMap map[string]field.Expr
}

func (s student) Table(newTableName string) *student {
	s.studentDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s student) As(alias string) *student {
	s.studentDo.DO = *(s.studentDo.As(alias).(*gormgen.DO))
	return s.updateTableName(alias)
}

func (s *student) updateTableName(table string) *student {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.Sex = field.NewString(table, "sex")
	s.Age = field.NewInt32(table, "age")
	s.Addr = field.NewString(table, "addr")

	s.fillFieldMap()

	return s
}

func (s *student) WithContext(ctx context.Context) IStudentDo { return s.studentDo.WithContext(ctx) }

func (s student) TableName() string { return s.studentDo.TableName() }

func (s student) Alias() string { return s.studentDo.Alias() }

func (s student) Columns(cols ...field.Expr) gormgen.Columns { return s.studentDo.Columns(cols...) }

func (s *student) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *student) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["sex"] = s.Sex
	s.fieldMap["age"] = s.Age
	s.fieldMap["addr"] = s.Addr
}

func (s student) clone(db *gorm.DB) student {
	s.studentDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s student) replaceDB(db *gorm.DB) student {
	s.studentDo.ReplaceDB(db)
	return s
}

type studentDo struct{ gormgen.DO }

type IStudentDo interface {
	gormgen.SubQuery
	Debug() IStudentDo
	WithContext(ctx context.Context) IStudentDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStudentDo
	WriteDB() IStudentDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IStudentDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IStudentDo
	Not(conds ...gormgen.Condition) IStudentDo
	Or(conds ...gormgen.Condition) IStudentDo
	Select(conds ...field.Expr) IStudentDo
	Where(conds ...gormgen.Condition) IStudentDo
	Order(conds ...field.Expr) IStudentDo
	Distinct(cols ...field.Expr) IStudentDo
	Omit(cols ...field.Expr) IStudentDo
	Join(table schema.Tabler, on ...field.Expr) IStudentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStudentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStudentDo
	Group(cols ...field.Expr) IStudentDo
	Having(conds ...gormgen.Condition) IStudentDo
	Limit(limit int) IStudentDo
	Offset(offset int) IStudentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IStudentDo
	Unscoped() IStudentDo
	Create(values ...*model.Student) error
	CreateInBatches(values []*model.Student, batchSize int) error
	Save(values ...*model.Student) error
	First() (*model.Student, error)
	Take() (*model.Student, error)
	Last() (*model.Student, error)
	Find() ([]*model.Student, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.Student, err error)
	FindInBatches(result *[]*model.Student, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Student) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IStudentDo
	Assign(attrs ...field.AssignExpr) IStudentDo
	Joins(fields ...field.RelationField) IStudentDo
	Preload(fields ...field.RelationField) IStudentDo
	FirstOrInit() (*model.Student, error)
	FirstOrCreate() (*model.Student, error)
	FindByPage(offset int, limit int) (result []*model.Student, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStudentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s studentDo) Debug() IStudentDo {
	return s.withDO(s.DO.Debug())
}

func (s studentDo) WithContext(ctx context.Context) IStudentDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s studentDo) ReadDB() IStudentDo {
	return s.Clauses(dbresolver.Read)
}

func (s studentDo) WriteDB() IStudentDo {
	return s.Clauses(dbresolver.Write)
}

func (s studentDo) Session(config *gorm.Session) IStudentDo {
	return s.withDO(s.DO.Session(config))
}

func (s studentDo) Clauses(conds ...clause.Expression) IStudentDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s studentDo) Returning(value interface{}, columns ...string) IStudentDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s studentDo) Not(conds ...gormgen.Condition) IStudentDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s studentDo) Or(conds ...gormgen.Condition) IStudentDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s studentDo) Select(conds ...field.Expr) IStudentDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s studentDo) Where(conds ...gormgen.Condition) IStudentDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s studentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IStudentDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s studentDo) Order(conds ...field.Expr) IStudentDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s studentDo) Distinct(cols ...field.Expr) IStudentDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s studentDo) Omit(cols ...field.Expr) IStudentDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s studentDo) Join(table schema.Tabler, on ...field.Expr) IStudentDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s studentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStudentDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s studentDo) RightJoin(table schema.Tabler, on ...field.Expr) IStudentDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s studentDo) Group(cols ...field.Expr) IStudentDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s studentDo) Having(conds ...gormgen.Condition) IStudentDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s studentDo) Limit(limit int) IStudentDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s studentDo) Offset(offset int) IStudentDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s studentDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IStudentDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s studentDo) Unscoped() IStudentDo {
	return s.withDO(s.DO.Unscoped())
}

func (s studentDo) Create(values ...*model.Student) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s studentDo) CreateInBatches(values []*model.Student, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s studentDo) Save(values ...*model.Student) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s studentDo) First() (*model.Student, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Student), nil
	}
}

func (s studentDo) Take() (*model.Student, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Student), nil
	}
}

func (s studentDo) Last() (*model.Student, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Student), nil
	}
}

func (s studentDo) Find() ([]*model.Student, error) {
	result, err := s.DO.Find()
	return result.([]*model.Student), err
}

func (s studentDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.Student, err error) {
	buf := make([]*model.Student, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s studentDo) FindInBatches(result *[]*model.Student, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s studentDo) Attrs(attrs ...field.AssignExpr) IStudentDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s studentDo) Assign(attrs ...field.AssignExpr) IStudentDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s studentDo) Joins(fields ...field.RelationField) IStudentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s studentDo) Preload(fields ...field.RelationField) IStudentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s studentDo) FirstOrInit() (*model.Student, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Student), nil
	}
}

func (s studentDo) FirstOrCreate() (*model.Student, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Student), nil
	}
}

func (s studentDo) FindByPage(offset int, limit int) (result []*model.Student, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s studentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s studentDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s studentDo) Delete(models ...*model.Student) (result gormgen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *studentDo) withDO(do gormgen.Dao) *studentDo {
	s.DO = *do.(*gormgen.DO)
	return s
}
