// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.
// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.
// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.

package service

import (
	"context"

	"github.com/pkg/errors"
	"github.com/shinemost/helloworld/config"
	"github.com/shinemost/helloworld/dto"
	"github.com/shinemost/helloworld/model"
	"github.com/shinemost/helloworld/query"
	"github.com/unionj-cloud/go-doudou/v2/framework/database"
	paginate "github.com/unionj-cloud/go-doudou/v2/toolkit/pagination/gorm"

	"github.com/golang/protobuf/ptypes/wrappers"
	pb "github.com/shinemost/helloworld/transport/grpc"
	jsoncopier "github.com/unionj-cloud/go-doudou/v2/toolkit/copier"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/anypb"
	"google.golang.org/protobuf/types/known/emptypb"
)

func init() {
	query.SetDefault(database.Db)
}

var _ Helloworld = (*HelloworldImpl)(nil)

var _ pb.HelloworldServiceServer = (*HelloworldImpl)(nil)

type HelloworldImpl struct {
	pb.UnimplementedHelloworldServiceServer

	conf *config.Config
	pg   *paginate.Pagination
	q    *query.Query
}

func NewHelloworld(conf *config.Config) *HelloworldImpl {
	pg := paginate.New(&paginate.Config{
		FieldSelectorEnabled: true,
	})
	return &HelloworldImpl{
		conf: conf,
		pg:   pg,
		q:    query.Q,
	}
}

func (receiver HelloworldImpl) clone(q *query.Query) *HelloworldImpl {
	receiver.q = q
	return &receiver
}

// PostGenStudent mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) PostGenStudent(ctx context.Context, body dto.Student) (data int32, err error) {
	m := model.Student(body)
	u := receiver.q.Student
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenStudents mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) PostGenStudents(ctx context.Context, body []dto.Student) (data []int32, err error) {
	list := make([]*model.Student, 0, len(body))
	for _, item := range body {
		m := model.Student(item)
		list = append(list, &m)
	}
	u := receiver.q.Student
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenStudent_Id mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) GetGenStudent_Id(ctx context.Context, id int32) (data dto.Student, err error) {
	u := receiver.q.Student
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.Student{}, errors.WithStack(err)
	}
	return dto.Student(*m), nil
}

// PutGenStudent mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) PutGenStudent(ctx context.Context, body dto.Student) (err error) {
	m := model.Student(body)
	u := receiver.q.Student
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenStudent_Id mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) DeleteGenStudent_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.Student
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenStudents mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) GetGenStudents(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.Student{})).Request(parameter).Response(&[]model.Student{})
	data = dto.Page(paginated)
	return
}

// PostGenStudentRpc mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) PostGenStudentRpc(ctx context.Context, request *pb.Student) (*pb.PostGenStudentRpcResponse, error) {
	var body dto.Student
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostGenStudent(ctx, body)
	return &pb.PostGenStudentRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// PostGenStudentsRpc mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) PostGenStudentsRpc(ctx context.Context, request *pb.PostGenStudentsRpcRequest) (*pb.PostGenStudentsRpcResponse, error) {
	list := make([]dto.Student, 0, len(request.Body))
	for _, item := range request.Body {
		var d dto.Student
		jsoncopier.DeepCopy(item, &d)
		list = append(list, d)
	}
	data, err := receiver.PostGenStudents(ctx, list)
	return &pb.PostGenStudentsRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// GetGenStudentIdRpc mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) GetGenStudentIdRpc(ctx context.Context, request *pb.GetGenStudentIdRpcRequest) (*pb.Student, error) {
	data, err := receiver.GetGenStudent_Id(ctx, request.Id)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	var ret pb.Student
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutGenStudentRpc mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) PutGenStudentRpc(ctx context.Context, request *pb.Student) (*emptypb.Empty, error) {
	var body dto.Student
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errors.WithStack(receiver.PutGenStudent(ctx, body))
}

// DeleteGenStudentIdRpc mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) DeleteGenStudentIdRpc(ctx context.Context, request *pb.DeleteGenStudentIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errors.WithStack(receiver.DeleteGenStudent_Id(ctx, request.Id))
}

// GetGenStudentsRpc mapped from table <student>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *HelloworldImpl) GetGenStudentsRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errors.WithStack(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetGenStudents(ctx, parameter)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		d := dto.Student(item.(model.Student))
		var msg pb.Student
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errors.WithStack(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}
