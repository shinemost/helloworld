// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: transport/grpc/helloworld.proto

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloworldServiceClient is the client API for HelloworldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloworldServiceClient interface {
	// PostGenStudent mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostGenStudentRpc(ctx context.Context, in *Student, opts ...grpc.CallOption) (*PostGenStudentRpcResponse, error)
	// PostGenStudents mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostGenStudentsRpc(ctx context.Context, in *PostGenStudentsRpcRequest, opts ...grpc.CallOption) (*PostGenStudentsRpcResponse, error)
	// GetGenStudent_Id mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetGenStudentIdRpc(ctx context.Context, in *GetGenStudentIdRpcRequest, opts ...grpc.CallOption) (*Student, error)
	// PutGenStudent mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutGenStudentRpc(ctx context.Context, in *Student, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteGenStudent_Id mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteGenStudentIdRpc(ctx context.Context, in *DeleteGenStudentIdRpcRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetGenStudents mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetGenStudentsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
}

type helloworldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloworldServiceClient(cc grpc.ClientConnInterface) HelloworldServiceClient {
	return &helloworldServiceClient{cc}
}

func (c *helloworldServiceClient) PostGenStudentRpc(ctx context.Context, in *Student, opts ...grpc.CallOption) (*PostGenStudentRpcResponse, error) {
	out := new(PostGenStudentRpcResponse)
	err := c.cc.Invoke(ctx, "/helloworld.HelloworldService/PostGenStudentRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldServiceClient) PostGenStudentsRpc(ctx context.Context, in *PostGenStudentsRpcRequest, opts ...grpc.CallOption) (*PostGenStudentsRpcResponse, error) {
	out := new(PostGenStudentsRpcResponse)
	err := c.cc.Invoke(ctx, "/helloworld.HelloworldService/PostGenStudentsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldServiceClient) GetGenStudentIdRpc(ctx context.Context, in *GetGenStudentIdRpcRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/helloworld.HelloworldService/GetGenStudentIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldServiceClient) PutGenStudentRpc(ctx context.Context, in *Student, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/helloworld.HelloworldService/PutGenStudentRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldServiceClient) DeleteGenStudentIdRpc(ctx context.Context, in *DeleteGenStudentIdRpcRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/helloworld.HelloworldService/DeleteGenStudentIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldServiceClient) GetGenStudentsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/helloworld.HelloworldService/GetGenStudentsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloworldServiceServer is the server API for HelloworldService service.
// All implementations must embed UnimplementedHelloworldServiceServer
// for forward compatibility
type HelloworldServiceServer interface {
	// PostGenStudent mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostGenStudentRpc(context.Context, *Student) (*PostGenStudentRpcResponse, error)
	// PostGenStudents mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostGenStudentsRpc(context.Context, *PostGenStudentsRpcRequest) (*PostGenStudentsRpcResponse, error)
	// GetGenStudent_Id mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetGenStudentIdRpc(context.Context, *GetGenStudentIdRpcRequest) (*Student, error)
	// PutGenStudent mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutGenStudentRpc(context.Context, *Student) (*empty.Empty, error)
	// DeleteGenStudent_Id mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteGenStudentIdRpc(context.Context, *DeleteGenStudentIdRpcRequest) (*empty.Empty, error)
	// GetGenStudents mapped from table <student>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetGenStudentsRpc(context.Context, *Parameter) (*Page, error)
	mustEmbedUnimplementedHelloworldServiceServer()
}

// UnimplementedHelloworldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloworldServiceServer struct {
}

func (UnimplementedHelloworldServiceServer) PostGenStudentRpc(context.Context, *Student) (*PostGenStudentRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostGenStudentRpc not implemented")
}
func (UnimplementedHelloworldServiceServer) PostGenStudentsRpc(context.Context, *PostGenStudentsRpcRequest) (*PostGenStudentsRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostGenStudentsRpc not implemented")
}
func (UnimplementedHelloworldServiceServer) GetGenStudentIdRpc(context.Context, *GetGenStudentIdRpcRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenStudentIdRpc not implemented")
}
func (UnimplementedHelloworldServiceServer) PutGenStudentRpc(context.Context, *Student) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGenStudentRpc not implemented")
}
func (UnimplementedHelloworldServiceServer) DeleteGenStudentIdRpc(context.Context, *DeleteGenStudentIdRpcRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGenStudentIdRpc not implemented")
}
func (UnimplementedHelloworldServiceServer) GetGenStudentsRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenStudentsRpc not implemented")
}
func (UnimplementedHelloworldServiceServer) mustEmbedUnimplementedHelloworldServiceServer() {}

// UnsafeHelloworldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloworldServiceServer will
// result in compilation errors.
type UnsafeHelloworldServiceServer interface {
	mustEmbedUnimplementedHelloworldServiceServer()
}

func RegisterHelloworldServiceServer(s grpc.ServiceRegistrar, srv HelloworldServiceServer) {
	s.RegisterService(&HelloworldService_ServiceDesc, srv)
}

func _HelloworldService_PostGenStudentRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).PostGenStudentRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.HelloworldService/PostGenStudentRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).PostGenStudentRpc(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloworldService_PostGenStudentsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostGenStudentsRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).PostGenStudentsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.HelloworldService/PostGenStudentsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).PostGenStudentsRpc(ctx, req.(*PostGenStudentsRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloworldService_GetGenStudentIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenStudentIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).GetGenStudentIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.HelloworldService/GetGenStudentIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).GetGenStudentIdRpc(ctx, req.(*GetGenStudentIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloworldService_PutGenStudentRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).PutGenStudentRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.HelloworldService/PutGenStudentRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).PutGenStudentRpc(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloworldService_DeleteGenStudentIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGenStudentIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).DeleteGenStudentIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.HelloworldService/DeleteGenStudentIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).DeleteGenStudentIdRpc(ctx, req.(*DeleteGenStudentIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloworldService_GetGenStudentsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).GetGenStudentsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.HelloworldService/GetGenStudentsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).GetGenStudentsRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloworldService_ServiceDesc is the grpc.ServiceDesc for HelloworldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloworldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.HelloworldService",
	HandlerType: (*HelloworldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostGenStudentRpc",
			Handler:    _HelloworldService_PostGenStudentRpc_Handler,
		},
		{
			MethodName: "PostGenStudentsRpc",
			Handler:    _HelloworldService_PostGenStudentsRpc_Handler,
		},
		{
			MethodName: "GetGenStudentIdRpc",
			Handler:    _HelloworldService_GetGenStudentIdRpc_Handler,
		},
		{
			MethodName: "PutGenStudentRpc",
			Handler:    _HelloworldService_PutGenStudentRpc_Handler,
		},
		{
			MethodName: "DeleteGenStudentIdRpc",
			Handler:    _HelloworldService_DeleteGenStudentIdRpc_Handler,
		},
		{
			MethodName: "GetGenStudentsRpc",
			Handler:    _HelloworldService_GetGenStudentsRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/helloworld.proto",
}
